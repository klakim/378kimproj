{
  "hash": "99d90ffe625f395cce1946a6d706d9f4",
  "result": {
    "markdown": "---\ntitle: \"model\"\nformat: html\n---\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nfrom palmerpenguins import penguins\nfrom pandas import get_dummies\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\n```\n:::\n\n\n## Get Data fixed 3/7\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndf = penguins.load_penguins().dropna()\n\ndf.head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>species</th>\n      <th>island</th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>flipper_length_mm</th>\n      <th>body_mass_g</th>\n      <th>sex</th>\n      <th>year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.1</td>\n      <td>18.7</td>\n      <td>181.0</td>\n      <td>3750.0</td>\n      <td>male</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.5</td>\n      <td>17.4</td>\n      <td>186.0</td>\n      <td>3800.0</td>\n      <td>female</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>40.3</td>\n      <td>18.0</td>\n      <td>195.0</td>\n      <td>3250.0</td>\n      <td>female</td>\n      <td>2007</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Define Model and Fit\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nX = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)\ny = df['body_mass_g']\n\n#context for building the api\nprint(X)\nmodel = LinearRegression().fit(X, y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     bill_length_mm  species_Chinstrap  species_Gentoo  sex_male\n0              39.1              False           False      True\n1              39.5              False           False     False\n2              40.3              False           False     False\n4              36.7              False           False     False\n5              39.3              False           False      True\n..              ...                ...             ...       ...\n339            55.8               True           False      True\n340            43.5               True           False     False\n341            49.6               True           False      True\n342            50.8               True           False      True\n343            50.2               True           False     False\n\n[333 rows x 4 columns]\n```\n:::\n:::\n\n\n## Get some information\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nprint(f\"R^2 {model.score(X,y)}\")\nprint(f\"Intercept {model.intercept_}\")\nprint(f\"Columns {X.columns}\")\nprint(f\"Coefficients {model.coef_}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR^2 0.8555368759537614\nIntercept 2169.269720939399\nColumns Index(['bill_length_mm', 'species_Chinstrap', 'species_Gentoo', 'sex_male'], dtype='object')\nCoefficients [  32.53688677 -298.76553447 1094.86739145  547.36692408]\n```\n:::\n:::\n\n\n## Attempt at Model Validation\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)  # 80% training and 20% testing\n\nmodel = LinearRegression().fit(X_train, y_train)\n#Asked Chat GPT on what statistics to run on \ny_pred = model.predict(X_test)\nmse = mean_squared_error(y_test, y_pred)\nmae = mean_absolute_error(y_test, y_pred)\nr2 = r2_score(y_test, y_pred)\n\nprint(f'Mean Squared Error (MSE): {mse}')\nprint(f'Mean Absolute Error (MAE): {mae}')\nprint(f'R-squared (R²): {r2}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMean Squared Error (MSE): 96276.55445316936\nMean Absolute Error (MAE): 247.01332715906727\nR-squared (R²): 0.8389673544168463\n```\n:::\n:::\n\n\n## Chapter 2\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nfrom joblib import dump\n\nfrom vetiver import VetiverModel\nv = VetiverModel(model, model_name='penguin_model', prototype_data=X)\n\n# Assuming 'model' is your trained LinearRegression model\ndump(model, 'penguin_model.pkl')\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n['penguin_model.pkl']\n```\n:::\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nimport duckdb\nfrom palmerpenguins import penguins\n\ncon = duckdb.connect('my-db.duckdb')\ndf = con.execute(\"SELECT * FROM penguins\").fetchdf().dropna()\ncon.close()\n```\n:::\n\n\nDocumentation Statement: I used the following resource : <https://www.geeksforgeeks.org/how-to-do-train-test-split-using-sklearn-in-python/>\n\n",
    "supporting": [
      "model_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}