[
  {
    "objectID": "model.html",
    "href": "model.html",
    "title": "model",
    "section": "",
    "text": "from palmerpenguins import penguins\nfrom pandas import get_dummies\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score"
  },
  {
    "objectID": "model.html#model",
    "href": "model.html#model",
    "title": "model",
    "section": "Model:",
    "text": "Model:\n\ndf = penguins.load_penguins().dropna()\n\ndf.head(3)\n\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nmale\n2007\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nfemale\n2007\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nfemale\n2007"
  },
  {
    "objectID": "model.html#define-model-and-fit",
    "href": "model.html#define-model-and-fit",
    "title": "model",
    "section": "Define Model and Fit",
    "text": "Define Model and Fit\n\nX = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)\ny = df['body_mass_g']\n\n#context for building the api\nprint(X)\nmodel = LinearRegression().fit(X, y)\n\n     bill_length_mm  species_Chinstrap  species_Gentoo  sex_male\n0              39.1              False           False      True\n1              39.5              False           False     False\n2              40.3              False           False     False\n4              36.7              False           False     False\n5              39.3              False           False      True\n..              ...                ...             ...       ...\n339            55.8               True           False      True\n340            43.5               True           False     False\n341            49.6               True           False      True\n342            50.8               True           False      True\n343            50.2               True           False     False\n\n[333 rows x 4 columns]"
  },
  {
    "objectID": "model.html#get-some-information",
    "href": "model.html#get-some-information",
    "title": "model",
    "section": "Get some information",
    "text": "Get some information\n\nprint(f\"R^2 {model.score(X,y)}\")\nprint(f\"Intercept {model.intercept_}\")\nprint(f\"Columns {X.columns}\")\nprint(f\"Coefficients {model.coef_}\")\n\nR^2 0.8555368759537614\nIntercept 2169.2697209393996\nColumns Index(['bill_length_mm', 'species_Chinstrap', 'species_Gentoo', 'sex_male'], dtype='object')\nCoefficients [  32.53688677 -298.76553447 1094.86739145  547.36692408]"
  },
  {
    "objectID": "model.html#attempt-at-model-validation",
    "href": "model.html#attempt-at-model-validation",
    "title": "model",
    "section": "Attempt at Model Validation",
    "text": "Attempt at Model Validation\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)  # 80% training and 20% testing\n\nmodel = LinearRegression().fit(X_train, y_train)\n#Asked Chat GPT on what statistics to run on \ny_pred = model.predict(X_test)\nmse = mean_squared_error(y_test, y_pred)\nmae = mean_absolute_error(y_test, y_pred)\nr2 = r2_score(y_test, y_pred)\n\nprint(f'Mean Squared Error (MSE): {mse}')\nprint(f'Mean Absolute Error (MAE): {mae}')\nprint(f'R-squared (R²): {r2}')\n\nMean Squared Error (MSE): 96276.55445316953\nMean Absolute Error (MAE): 247.01332715906779\nR-squared (R²): 0.838967354416846"
  },
  {
    "objectID": "model.html#chapter-2",
    "href": "model.html#chapter-2",
    "title": "model",
    "section": "Chapter 2",
    "text": "Chapter 2\n\nfrom joblib import dump\ndump(model, 'penguin_model.pkl')\n\n['penguin_model.pkl']\n\n\n\nfrom vetiver import VetiverModel\n\nv = VetiverModel(model=model, model_name='penguin_model', prototype_data=X)\n\n\nfrom pins import board_folder\nfrom vetiver import vetiver_pin_write\n\n# Initialize board folder\nmodel_board = board_folder(\"finalproj/pins-py\", allow_pickle_read=True)\n\n# Write the Vetiver model to the board\nvetiver_pin_write(model_board, v)\n\nModel Cards provide a framework for transparent, responsible reporting. \n Use the vetiver `.qmd` Quarto template as a place to start, \n with vetiver.model_card()\nWriting pin:\nName: 'penguin_model'\nVersion: 20240421T193111Z-41209\n\n\n\n#Script from chatGPT on how to move contents in one folder to another\n\nimport os\nimport shutil\n\ndef copy_directory_contents(src_dir, dest_dir):\n    # Check if source directory exists\n    if not os.path.exists(src_dir):\n        print(f\"Source directory {src_dir} does not exist.\")\n        return\n\n    # Check if destination directory exists; if not, create it\n    if not os.path.exists(dest_dir):\n        os.makedirs(dest_dir)\n\n    # List all files and directories in the source directory\n    for item in os.listdir(src_dir):\n        src_path = os.path.join(src_dir, item)\n        dest_path = os.path.join(dest_dir, item)\n\n        # Check whether the current item is a directory or a file\n        if os.path.isdir(src_path):\n            # Recursively copy a directory\n            shutil.copytree(src_path, dest_path, dirs_exist_ok=True)\n        else:\n            # Copy a single file\n            shutil.copy2(src_path, dest_path)\n\n# Specify your source and destination paths\nsource_directory = 'pins-py'\ndestination_directory = 'data/model'\n\n# Copy the contents from source to destination\ncopy_directory_contents(source_directory, destination_directory)\n\n\n#from vetiver import VetiverAPI\n#app = VetiverAPI(v, check_prototype=True)\n\n\n#vetiver.prepare_docker(model_board, \"penguin_model\")\n\n\n#from vetiver.server import predict, vetiver_endpoint\n#endpoint = vetiver_endpoint(\"http://127.0.0.1:8080/predict\")\n#endpoint\n\n\n # import pandas as pd\n\n# Your existing dictionary\n#new_penguin_dict = {\n    #\"bill_length_mm\": [120],  # Enclosed the values in lists\n    #\"sex_male\": [1],          # Assuming '1' for male based on your previous messages\n   # \"species_Gentoo\": [1],\n    #\"species_Chinstrap\": [0]\n#}\n\n# Convert the dictionary to a DataFrame\n#new_penguin_df = pd.DataFrame(new_penguin_dict)\n\n# Now, convert the first row of the DataFrame to a dictionary\n#record_dict = new_penguin_df.iloc[0].to_dict()\n\n\n#import requests  # Ensure this is installed: pip install requests\n\n# Assuming 'endpoint' is your API endpoint URL\n#response = requests.post(endpoint, json=record_dict)\n\n# Check the response\n#if response.ok:\n#    print(\"Success:\", response.json())\n#else:\n#    print(\"Error:\", response.status_code, response.text)\n\n\n#if(FALSE) {\n # import duckdb\n#from palmerpenguins import penguins\n\n#con = duckdb.connect('my-db.duckdb')\n#df = con.execute(\"SELECT * FROM penguins\").fetchdf().dropna()\n#con.close()\n#}\n\nDocumentation Statement: I used the following resource : https://www.geeksforgeeks.org/how-to-do-train-test-split-using-sklearn-in-python/."
  },
  {
    "objectID": "eda.html#penguin-size-and-mass-by-sex-and-species",
    "href": "eda.html#penguin-size-and-mass-by-sex-and-species",
    "title": "eda.qmd",
    "section": "Penguin Size and Mass by Sex and Species",
    "text": "Penguin Size and Mass by Sex and Species\n\n#Needed Packages\ninstall.packages(\"palmerpenguins\")\n\nThe following package(s) will be installed:\n- palmerpenguins [0.1.1]\nThese packages will be installed into \"~/work/378kimproj/378kimproj/renv/library/R-4.2/x86_64-pc-linux-gnu\".\n\n# Installing packages --------------------------------------------------------\n- Installing palmerpenguins ...                 OK [linked from cache]\nSuccessfully installed 1 package in 6.6 milliseconds.\n\ninstall.packages(\"dplyr\")\n\nThe following package(s) will be installed:\n- dplyr [1.1.4]\nThese packages will be installed into \"~/work/378kimproj/378kimproj/renv/library/R-4.2/x86_64-pc-linux-gnu\".\n\n# Installing packages --------------------------------------------------------\n- Installing dplyr ...                          OK [linked from cache]\nSuccessfully installed 1 package in 3.8 milliseconds.\n\ninstall.packages(\"dbplyr\")\n\n# Downloading packages -------------------------------------------------------\n- Downloading dbplyr from CRAN ...              OK [1.2 Mb in 0.23s]\n- Downloading blob from CRAN ...                OK [44.8 Kb in 0.14s]\n- Downloading DBI from CRAN ...                 OK [852.6 Kb in 0.23s]\n- Downloading tidyselect from CRAN ...          OK [216.9 Kb in 0.17s]\n- Downloading purrr from CRAN ...               OK [473.8 Kb in 0.21s]\n- Downloading tidyr from CRAN ...               OK [1.1 Mb in 0.2s]\n- Downloading cpp11 from CRAN ...               OK [273.6 Kb in 0.22s]\nSuccessfully downloaded 7 packages in 2.2 seconds.\n\nThe following package(s) will be installed:\n- blob       [1.2.4]\n- cpp11      [0.4.7]\n- DBI        [1.2.2]\n- dbplyr     [2.5.0]\n- purrr      [1.0.2]\n- tidyr      [1.3.1]\n- tidyselect [1.2.1]\nThese packages will be installed into \"~/work/378kimproj/378kimproj/renv/library/R-4.2/x86_64-pc-linux-gnu\".\n\n# Installing packages --------------------------------------------------------\n- Installing blob ...                           OK [installed binary and cached in 0.53s]\n- Installing DBI ...                            OK [installed binary and cached in 0.53s]\n- Installing tidyselect ...                     OK [installed binary and cached in 0.56s]\n- Installing purrr ...                          OK [installed binary and cached in 0.56s]\n- Installing cpp11 ...                          OK [installed binary and cached in 0.44s]\n- Installing tidyr ...                          OK [installed binary and cached in 0.78s]\n- Installing dbplyr ...                         OK [installed binary and cached in 1.0s]\nSuccessfully installed 7 packages in 4.6 seconds.\n\ninstall.packages(\"ggplot2\")\n\nThe following package(s) will be installed:\n- ggplot2 [3.5.0]\nThese packages will be installed into \"~/work/378kimproj/378kimproj/renv/library/R-4.2/x86_64-pc-linux-gnu\".\n\n# Installing packages --------------------------------------------------------\n- Installing ggplot2 ...                        OK [linked from cache]\nSuccessfully installed 1 package in 3.9 milliseconds.\n\ninstall.packages(\"DBI\")\n\nThe following package(s) will be installed:\n- DBI [1.2.2]\nThese packages will be installed into \"~/work/378kimproj/378kimproj/renv/library/R-4.2/x86_64-pc-linux-gnu\".\n\n# Installing packages --------------------------------------------------------\n- Installing DBI ...                            OK [linked from cache]\nSuccessfully installed 1 package in 3.7 milliseconds.\n\ninstall.packages(\"duckdb\")\n\n# Downloading packages -------------------------------------------------------\n- Downloading duckdb from CRAN ...              OK [10.6 Mb in 0.52s]\nSuccessfully downloaded 1 package in 0.99 seconds.\n\nThe following package(s) will be installed:\n- duckdb [0.10.1]\nThese packages will be installed into \"~/work/378kimproj/378kimproj/renv/library/R-4.2/x86_64-pc-linux-gnu\".\n\n# Installing packages --------------------------------------------------------\n- Installing duckdb ...                         OK [installed binary and cached in 1.3s]\nSuccessfully installed 1 package in 1.6 seconds.\n\ninstall.packages(\"vetiver\")\n\n# Downloading packages -------------------------------------------------------\n- Downloading vetiver from CRAN ...             OK [550.8 Kb in 0.21s]\n- Downloading bundle from CRAN ...              OK [1.4 Mb in 0.21s]\n- Downloading butcher from CRAN ...             OK [266.3 Kb in 0.14s]\n- Downloading lobstr from CRAN ...              OK [129.3 Kb in 0.19s]\n- Downloading crayon from CRAN ...              OK [154.9 Kb in 0.16s]\n- Downloading prettyunits from CRAN ...         OK [151.5 Kb in 0.25s]\n- Downloading cereal from CRAN ...              OK [44.5 Kb in 0.15s]\n- Downloading hardhat from CRAN ...             OK [803.2 Kb in 0.18s]\n- Downloading pins from CRAN ...                OK [653.9 Kb in 0.31s]\n- Downloading httr from CRAN ...                OK [453.8 Kb in 0.16s]\n- Downloading curl from CRAN ...                OK [745.1 Kb in 0.19s]\n- Downloading openssl from CRAN ...             OK [1.2 Mb in 0.22s]\n- Downloading askpass from CRAN ...             OK [21 Kb in 0.19s]\n- Downloading sys from CRAN ...                 OK [38.7 Kb in 0.21s]\n- Downloading whisker from CRAN ...             OK [64.3 Kb in 0.15s]\n- Downloading rapidoc from CRAN ...             OK [253.2 Kb in 0.15s]\n- Downloading readr from CRAN ...               OK [805.1 Kb in 0.18s]\n- Downloading clipr from CRAN ...               OK [48.8 Kb in 0.15s]\n- Downloading hms from CRAN ...                 OK [94.3 Kb in 0.15s]\n- Downloading vroom from CRAN ...               OK [904.7 Kb in 0.18s]\n- Downloading bit64 from CRAN ...               OK [561.4 Kb in 0.2s]\n- Downloading bit from CRAN ...                 OK [1.1 Mb in 0.18s]\n- Downloading tzdb from CRAN ...                OK [624.9 Kb in 0.18s]\n- Downloading progress from CRAN ...            OK [82.6 Kb in 0.15s]\nSuccessfully downloaded 24 packages in 7.2 seconds.\n\nThe following package(s) will be installed:\n- askpass     [1.2.0]\n- bit         [4.0.5]\n- bit64       [4.0.5]\n- bundle      [0.1.1]\n- butcher     [0.3.4]\n- cereal      [0.1.0]\n- clipr       [0.8.0]\n- crayon      [1.5.2]\n- curl        [5.2.1]\n- hardhat     [1.3.1]\n- hms         [1.1.3]\n- httr        [1.4.7]\n- lobstr      [1.1.2]\n- openssl     [2.1.1]\n- pins        [1.3.0]\n- prettyunits [1.2.0]\n- progress    [1.2.3]\n- rapidoc     [9.3.4]\n- readr       [2.1.5]\n- sys         [3.4.2]\n- tzdb        [0.4.0]\n- vetiver     [0.2.5]\n- vroom       [1.6.5]\n- whisker     [0.4.1]\nThese packages will be installed into \"~/work/378kimproj/378kimproj/renv/library/R-4.2/x86_64-pc-linux-gnu\".\n\n# Installing packages --------------------------------------------------------\n- Installing bundle ...                         OK [installed binary and cached in 0.6s]\n- Installing crayon ...                         OK [installed binary and cached in 0.42s]\n- Installing prettyunits ...                    OK [installed binary and cached in 0.42s]\n- Installing lobstr ...                         OK [installed binary and cached in 0.52s]\n- Installing butcher ...                        OK [installed binary and cached in 0.43s]\n- Installing cereal ...                         OK [installed binary and cached in 0.51s]\n- Installing hardhat ...                        OK [installed binary and cached in 0.71s]\n- Installing curl ...                           OK [installed binary and cached in 0.47s]\n- Installing sys ...                            OK [installed binary and cached in 0.43s]\n- Installing askpass ...                        OK [installed binary and cached in 0.42s]\n- Installing openssl ...                        OK [installed binary and cached in 0.51s]\n- Installing httr ...                           OK [installed binary and cached in 0.43s]\n- Installing whisker ...                        OK [installed binary and cached in 0.42s]\n- Installing pins ...                           OK [installed binary and cached in 0.64s]\n- Installing rapidoc ...                        OK [installed binary and cached in 0.43s]\n- Installing clipr ...                          OK [installed binary and cached in 0.42s]\n- Installing hms ...                            OK [installed binary and cached in 0.55s]\n- Installing bit ...                            OK [installed binary and cached in 0.46s]\n- Installing bit64 ...                          OK [installed binary and cached in 0.47s]\n- Installing tzdb ...                           OK [installed binary and cached in 0.47s]\n- Installing progress ...                       OK [installed binary and cached in 0.55s]\n- Installing vroom ...                          OK [installed binary and cached in 0.81s]\n- Installing readr ...                          OK [installed binary and cached in 0.75s]\n- Installing vetiver ...                        OK [installed binary and cached in 0.86s]\nSuccessfully installed 24 packages in 13 seconds.\n\ninstall.packages(\"tidyverse\")\n\n# Downloading packages -------------------------------------------------------\n- Downloading tidyverse from CRAN ...           OK [415.4 Kb in 0.15s]\n- Downloading broom from CRAN ...               OK [1.8 Mb in 0.19s]\n- Downloading backports from CRAN ...           OK [97.4 Kb in 0.2s]\n- Downloading conflicted from CRAN ...          OK [53.5 Kb in 0.16s]\n- Downloading dtplyr from CRAN ...              OK [345 Kb in 0.15s]\n- Downloading data.table from CRAN ...          OK [2.1 Mb in 0.19s]\n- Downloading forcats from CRAN ...             OK [412.6 Kb in 0.18s]\n- Downloading googledrive from CRAN ...         OK [1.8 Mb in 0.18s]\n- Downloading gargle from CRAN ...              OK [741.9 Kb in 0.16s]\n- Downloading uuid from CRAN ...                OK [46.5 Kb in 0.14s]\n- Downloading googlesheets4 from CRAN ...       OK [494 Kb in 0.17s]\n- Downloading cellranger from CRAN ...          OK [98.3 Kb in 0.17s]\n- Downloading rematch from CRAN ...             OK [15.1 Kb in 0.14s]\n- Downloading ids from CRAN ...                 OK [117 Kb in 0.18s]\n- Downloading rematch2 from CRAN ...            OK [43.6 Kb in 0.15s]\n- Downloading haven from CRAN ...               OK [365.3 Kb in 0.16s]\n- Downloading lubridate from CRAN ...           OK [942.1 Kb in 0.13s]\n- Downloading timechange from CRAN ...          OK [166.7 Kb in 0.13s]\n- Downloading modelr from CRAN ...              OK [194.3 Kb in 0.16s]\n- Downloading ragg from CRAN ...                OK [582.7 Kb in 0.2s]\n- Downloading systemfonts from CRAN ...         OK [238 Kb in 0.15s]\n- Downloading textshaping from CRAN ...         OK [96.9 Kb in 0.15s]\n- Downloading readxl from CRAN ...              OK [841.5 Kb in 0.19s]\n- Downloading reprex from CRAN ...              OK [480.6 Kb in 0.15s]\n- Downloading callr from CRAN ...               OK [423.3 Kb in 0.15s]\n- Downloading processx from CRAN ...            OK [426.9 Kb in 0.17s]\n- Downloading ps from CRAN ...                  OK [372 Kb in 0.15s]\n- Downloading rstudioapi from CRAN ...          OK [295.5 Kb in 0.16s]\n- Downloading rvest from CRAN ...               OK [287.3 Kb in 0.17s]\n- Downloading selectr from CRAN ...             OK [477.1 Kb in 0.15s]\n- Downloading xml2 from CRAN ...                OK [264.7 Kb in 0.18s]\nSuccessfully downloaded 31 packages in 9 seconds.\n\nThe following package(s) will be installed:\n- backports     [1.4.1]\n- broom         [1.0.5]\n- callr         [3.7.6]\n- cellranger    [1.1.0]\n- conflicted    [1.2.0]\n- data.table    [1.15.4]\n- dtplyr        [1.3.1]\n- forcats       [1.0.0]\n- gargle        [1.5.2]\n- googledrive   [2.1.1]\n- googlesheets4 [1.1.1]\n- haven         [2.5.4]\n- ids           [1.0.1]\n- lubridate     [1.9.3]\n- modelr        [0.1.11]\n- processx      [3.8.4]\n- ps            [1.7.6]\n- ragg          [1.3.0]\n- readxl        [1.4.3]\n- rematch       [2.0.0]\n- rematch2      [2.1.2]\n- reprex        [2.1.0]\n- rstudioapi    [0.16.0]\n- rvest         [1.0.4]\n- selectr       [0.4-2]\n- systemfonts   [1.0.6]\n- textshaping   [0.3.7]\n- tidyverse     [2.0.0]\n- timechange    [0.3.0]\n- uuid          [1.2-0]\n- xml2          [1.3.6]\nThese packages will be installed into \"~/work/378kimproj/378kimproj/renv/library/R-4.2/x86_64-pc-linux-gnu\".\n\n# Installing packages --------------------------------------------------------\n- Installing backports ...                      OK [installed binary and cached in 0.42s]\n- Installing broom ...                          OK [installed binary and cached in 0.85s]\n- Installing conflicted ...                     OK [installed binary and cached in 0.53s]\n- Installing data.table ...                     OK [installed binary and cached in 0.57s]\n- Installing dtplyr ...                         OK [installed binary and cached in 0.83s]\n- Installing forcats ...                        OK [installed binary and cached in 0.56s]\n- Installing gargle ...                         OK [installed binary and cached in 0.61s]\n- Installing uuid ...                           OK [installed binary and cached in 0.43s]\n- Installing googledrive ...                    OK [installed binary and cached in 0.9s]\n- Installing rematch ...                        OK [installed binary and cached in 0.41s]\n- Installing cellranger ...                     OK [installed binary and cached in 0.43s]\n- Installing ids ...                            OK [installed binary and cached in 0.43s]\n- Installing rematch2 ...                       OK [installed binary and cached in 0.67s]\n- Installing googlesheets4 ...                  OK [installed binary and cached in 0.85s]\n- Installing haven ...                          OK [installed binary and cached in 0.71s]\n- Installing timechange ...                     OK [installed binary and cached in 0.42s]\n- Installing lubridate ...                      OK [installed binary and cached in 0.57s]\n- Installing modelr ...                         OK [installed binary and cached in 0.78s]\n- Installing systemfonts ...                    OK [installed binary and cached in 0.43s]\n- Installing textshaping ...                    OK [installed binary and cached in 0.43s]\n- Installing ragg ...                           OK [installed binary and cached in 0.48s]\n- Installing readxl ...                         OK [installed binary and cached in 0.46s]\n- Installing ps ...                             OK [installed binary and cached in 0.44s]\n- Installing processx ...                       OK [installed binary and cached in 0.45s]\n- Installing callr ...                          OK [installed binary and cached in 0.45s]\n- Installing rstudioapi ...                     OK [installed binary and cached in 0.42s]\n- Installing reprex ...                         OK [installed binary and cached in 0.59s]\n- Installing selectr ...                        OK [installed binary and cached in 0.58s]\n- Installing xml2 ...                           OK [installed binary and cached in 0.54s]\n- Installing rvest ...                          OK [installed binary and cached in 0.58s]\n- Installing tidyverse ...                      OK [installed binary and cached in 0.44s]\nSuccessfully installed 31 packages in 18 seconds.\n\ninstall.packages(\"ISLR2\")\n\n# Downloading packages -------------------------------------------------------\n- Downloading ISLR2 from CRAN ...               OK [4 Mb in 0.23s]\nSuccessfully downloaded 1 package in 0.35 seconds.\n\nThe following package(s) will be installed:\n- ISLR2 [1.3-2]\nThese packages will be installed into \"~/work/378kimproj/378kimproj/renv/library/R-4.2/x86_64-pc-linux-gnu\".\n\n# Installing packages --------------------------------------------------------\n- Installing ISLR2 ...                          OK [installed binary and cached in 0.54s]\nSuccessfully installed 1 package in 0.58 seconds.\n\ninstall.packages(\"rpart.plot\")\n\n# Downloading packages -------------------------------------------------------\n- Downloading rpart.plot from CRAN ...          OK [989.9 Kb in 0.17s]\nSuccessfully downloaded 1 package in 0.28 seconds.\n\nThe following package(s) will be installed:\n- rpart.plot [3.1.2]\nThese packages will be installed into \"~/work/378kimproj/378kimproj/renv/library/R-4.2/x86_64-pc-linux-gnu\".\n\n# Installing packages --------------------------------------------------------\n- Installing rpart.plot ...                     OK [installed binary and cached in 0.46s]\nSuccessfully installed 1 package in 0.49 seconds.\n\ninstall.packages(\"vip\")\n\n# Downloading packages -------------------------------------------------------\n- Downloading vip from CRAN ...                 OK [2.4 Mb in 0.16s]\n- Downloading foreach from CRAN ...             OK [134.6 Kb in 0.16s]\n- Downloading iterators from CRAN ...           OK [337.4 Kb in 0.15s]\n- Downloading yardstick from CRAN ...           OK [1 Mb in 0.18s]\nSuccessfully downloaded 4 packages in 1.2 seconds.\n\nThe following package(s) will be installed:\n- foreach   [1.5.2]\n- iterators [1.0.14]\n- vip       [0.4.1]\n- yardstick [1.3.1]\nThese packages will be installed into \"~/work/378kimproj/378kimproj/renv/library/R-4.2/x86_64-pc-linux-gnu\".\n\n# Installing packages --------------------------------------------------------\n- Installing iterators ...                      OK [installed binary and cached in 0.43s]\n- Installing foreach ...                        OK [installed binary and cached in 0.44s]\n- Installing yardstick ...                      OK [installed binary and cached in 0.79s]\n- Installing vip ...                            OK [installed binary and cached in 0.52s]\nSuccessfully installed 4 packages in 2.3 seconds.\n\ninstall.packages(\"randomForest\")\n\n# Downloading packages -------------------------------------------------------\n- Downloading randomForest from CRAN ...        OK [255.7 Kb in 0.17s]\nSuccessfully downloaded 1 package in 0.25 seconds.\n\nThe following package(s) will be installed:\n- randomForest [4.7-1.1]\nThese packages will be installed into \"~/work/378kimproj/378kimproj/renv/library/R-4.2/x86_64-pc-linux-gnu\".\n\n# Installing packages --------------------------------------------------------\n- Installing randomForest ...                   OK [installed binary and cached in 0.43s]\nSuccessfully installed 1 package in 0.46 seconds.\n\ninstall.packages(\"tidymodels\")\n\n# Downloading packages -------------------------------------------------------\n- Downloading tidymodels from CRAN ...          OK [84.6 Kb in 0.15s]\n- Downloading dials from CRAN ...               OK [401.4 Kb in 0.17s]\n- Downloading DiceDesign from CRAN ...          OK [313.8 Kb in 0.15s]\n- Downloading infer from CRAN ...               OK [2 Mb in 0.18s]\n- Downloading patchwork from CRAN ...           OK [3.1 Mb in 0.18s]\n- Downloading modeldata from CRAN ...           OK [4.9 Mb in 0.15s]\n- Downloading parsnip from CRAN ...             OK [1.3 Mb in 0.17s]\n- Downloading globals from CRAN ...             OK [105 Kb in 0.14s]\n- Downloading recipes from CRAN ...             OK [1.5 Mb in 0.16s]\n- Downloading clock from CRAN ...               OK [1.8 Mb in 0.18s]\n- Downloading gower from CRAN ...               OK [201.1 Kb in 0.14s]\n- Downloading ipred from CRAN ...               OK [371.5 Kb in 0.16s]\n- Downloading prodlim from CRAN ...             OK [401.3 Kb in 0.14s]\n- Downloading Rcpp from CRAN ...                OK [2 Mb in 0.17s]\n- Downloading diagram from CRAN ...             OK [658 Kb in 0.15s]\n- Downloading shape from CRAN ...               OK [728.8 Kb in 0.15s]\n- Downloading lava from CRAN ...                OK [2.4 Mb in 0.16s]\n- Downloading future.apply from CRAN ...        OK [149.2 Kb in 0.14s]\n- Downloading future from CRAN ...              OK [632 Kb in 0.15s]\n- Downloading listenv from CRAN ...             OK [103.5 Kb in 0.15s]\n- Downloading parallelly from CRAN ...          OK [348.3 Kb in 0.16s]\n- Downloading numDeriv from CRAN ...            OK [110 Kb in 0.12s]\n- Downloading progressr from CRAN ...           OK [371.8 Kb in 0.15s]\n- Downloading SQUAREM from CRAN ...             OK [173.3 Kb in 0.12s]\n- Downloading timeDate from CRAN ...            OK [1.4 Mb in 0.22s]\n- Downloading rsample from CRAN ...             OK [511.6 Kb in 0.14s]\n- Downloading furrr from CRAN ...               OK [992.4 Kb in 0.17s]\n- Downloading slider from CRAN ...              OK [289.3 Kb in 0.14s]\n- Downloading warp from CRAN ...                OK [60.6 Kb in 0.15s]\n- Downloading tune from CRAN ...                OK [1.9 Mb in 0.17s]\n- Downloading doFuture from CRAN ...            OK [125.6 Kb in 0.16s]\n- Downloading GPfit from CRAN ...               OK [71.6 Kb in 0.14s]\n- Downloading lhs from CRAN ...                 OK [380.4 Kb in 0.17s]\n- Downloading workflows from CRAN ...           OK [217.5 Kb in 0.14s]\n- Downloading modelenv from CRAN ...            OK [71.8 Kb in 0.14s]\n- Downloading workflowsets from CRAN ...        OK [2.7 Mb in 0.16s]\nSuccessfully downloaded 36 packages in 11 seconds.\n\nThe following package(s) will be installed:\n- clock        [0.7.0]\n- diagram      [1.6.5]\n- dials        [1.2.1]\n- DiceDesign   [1.10]\n- doFuture     [1.0.1]\n- furrr        [0.3.1]\n- future       [1.33.2]\n- future.apply [1.11.2]\n- globals      [0.16.3]\n- gower        [1.0.1]\n- GPfit        [1.0-8]\n- infer        [1.0.7]\n- ipred        [0.9-14]\n- lava         [1.8.0]\n- lhs          [1.1.6]\n- listenv      [0.9.1]\n- modeldata    [1.3.0]\n- modelenv     [0.1.1]\n- numDeriv     [2016.8-1.1]\n- parallelly   [1.37.1]\n- parsnip      [1.2.1]\n- patchwork    [1.2.0]\n- prodlim      [2023.08.28]\n- progressr    [0.14.0]\n- Rcpp         [1.0.12]\n- recipes      [1.0.10]\n- rsample      [1.2.1]\n- shape        [1.4.6.1]\n- slider       [0.3.1]\n- SQUAREM      [2021.1]\n- tidymodels   [1.2.0]\n- timeDate     [4032.109]\n- tune         [1.2.1]\n- warp         [0.2.1]\n- workflows    [1.1.4]\n- workflowsets [1.1.0]\nThese packages will be installed into \"~/work/378kimproj/378kimproj/renv/library/R-4.2/x86_64-pc-linux-gnu\".\n\n# Installing packages --------------------------------------------------------\n- Installing DiceDesign ...                     OK [installed binary and cached in 0.42s]\n- Installing dials ...                          OK [installed binary and cached in 0.87s]\n- Installing patchwork ...                      OK [installed binary and cached in 1.0s]\n- Installing infer ...                          OK [installed binary and cached in 0.98s]\n- Installing modeldata ...                      OK [installed binary and cached in 0.85s]\n- Installing globals ...                        OK [installed binary and cached in 0.44s]\n- Installing parsnip ...                        OK [installed binary and cached in 0.96s]\n- Installing clock ...                          OK [installed binary and cached in 0.71s]\n- Installing gower ...                          OK [installed binary and cached in 0.43s]\n- Installing Rcpp ...                           OK [installed binary and cached in 0.7s]\n- Installing shape ...                          OK [installed binary and cached in 0.44s]\n- Installing diagram ...                        OK [installed binary and cached in 0.44s]\n- Installing listenv ...                        OK [installed binary and cached in 0.42s]\n- Installing parallelly ...                     OK [installed binary and cached in 0.45s]\n- Installing future ...                         OK [installed binary and cached in 0.5s]\n- Installing future.apply ...                   OK [installed binary and cached in 0.48s]\n- Installing numDeriv ...                       OK [installed binary and cached in 0.42s]\n- Installing progressr ...                      OK [installed binary and cached in 0.45s]\n- Installing SQUAREM ...                        OK [installed binary and cached in 0.42s]\n- Installing lava ...                           OK [installed binary and cached in 1.3s]\n- Installing prodlim ...                        OK [installed binary and cached in 1.3s]\n- Installing ipred ...                          OK [installed binary and cached in 1.3s]\n- Installing timeDate ...                       OK [installed binary and cached in 0.55s]\n- Installing recipes ...                        OK [installed binary and cached in 1.9s]\n- Installing furrr ...                          OK [installed binary and cached in 0.63s]\n- Installing warp ...                           OK [installed binary and cached in 0.44s]\n- Installing slider ...                         OK [installed binary and cached in 0.58s]\n- Installing rsample ...                        OK [installed binary and cached in 0.93s]\n- Installing doFuture ...                       OK [installed binary and cached in 0.49s]\n- Installing lhs ...                            OK [installed binary and cached in 0.51s]\n- Installing GPfit ...                          OK [installed binary and cached in 0.5s]\n- Installing modelenv ...                       OK [installed binary and cached in 0.41s]\n- Installing workflows ...                      OK [installed binary and cached in 0.92s]\n- Installing tune ...                           OK [installed binary and cached in 2.2s]\n- Installing workflowsets ...                   OK [installed binary and cached in 2.2s]\n- Installing tidymodels ...                     OK [installed binary and cached in 2.2s]\nSuccessfully installed 36 packages in 31 seconds.\n\ninstall.packages(\"xgboost\")\n\n# Downloading packages -------------------------------------------------------\n- Downloading xgboost from CRAN ...             OK [2 Mb in 0.47s]\nSuccessfully downloaded 1 package in 0.62 seconds.\n\nThe following package(s) will be installed:\n- xgboost [1.7.7.1]\nThese packages will be installed into \"~/work/378kimproj/378kimproj/renv/library/R-4.2/x86_64-pc-linux-gnu\".\n\n# Installing packages --------------------------------------------------------\n- Installing xgboost ...                        OK [installed binary and cached in 1.3s]\nSuccessfully installed 1 package in 1.4 seconds.\n\ncon &lt;- DBI::dbConnect(duckdb::duckdb(), dbdir = \"my-db.duckdb\")\nDBI::dbWriteTable(con, \"penguins\", palmerpenguins::penguins, overwrite = TRUE)\n\n\n#Load packages \nlibrary(palmerpenguins)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(dbplyr)\n\n\nAttaching package: 'dbplyr'\n\n\nThe following objects are masked from 'package:dplyr':\n\n    ident, sql\n\nlibrary(ggplot2)\nlibrary(duckdb)\n\nLoading required package: DBI\n\nlibrary(DBI)\nlibrary(vetiver)\nlibrary(pins)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ lubridate 1.9.3     ✔ tibble    3.2.1\n✔ purrr     1.0.2     ✔ tidyr     1.3.1\n✔ readr     2.1.5     \n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dbplyr::ident() masks dplyr::ident()\n✖ dplyr::lag()    masks stats::lag()\n✖ dbplyr::sql()   masks dplyr::sql()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(tidymodels)\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.2.0 ──\n✔ broom        1.0.5      ✔ rsample      1.2.1 \n✔ dials        1.2.1      ✔ tune         1.2.1 \n✔ infer        1.0.7      ✔ workflows    1.1.4 \n✔ modeldata    1.3.0      ✔ workflowsets 1.1.0 \n✔ parsnip      1.2.1      ✔ yardstick    1.3.1 \n✔ recipes      1.0.10     \n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ recipes::fixed()  masks stringr::fixed()\n✖ dbplyr::ident()   masks dplyr::ident()\n✖ dplyr::lag()      masks stats::lag()\n✖ tune::load_pkgs() masks vetiver::load_pkgs()\n✖ yardstick::spec() masks readr::spec()\n✖ dbplyr::sql()     masks dplyr::sql()\n✖ recipes::step()   masks stats::step()\n• Dig deeper into tidy modeling with R at https://www.tmwr.org\n\nlibrary(ISLR2)\nlibrary(rpart.plot)\n\nLoading required package: rpart\n\nAttaching package: 'rpart'\n\nThe following object is masked from 'package:dials':\n\n    prune\n\nlibrary(vip)\n\n\nAttaching package: 'vip'\n\nThe following object is masked from 'package:utils':\n\n    vi\n\nlibrary(xgboost)\n\n\nAttaching package: 'xgboost'\n\nThe following object is masked from 'package:dplyr':\n\n    slice\n\nlibrary(randomForest)\n\nrandomForest 4.7-1.1\nType rfNews() to see new features/changes/bug fixes.\n\nAttaching package: 'randomForest'\n\nThe following object is masked from 'package:ggplot2':\n\n    margin\n\nThe following object is masked from 'package:dplyr':\n\n    combine\n\n#load data \ncon &lt;- DBI::dbConnect(\n  duckdb::duckdb(), \n  dbdir = \"my-db.duckdb\"\n  )\ndf &lt;- dplyr::tbl(con, \"penguins\")\n\n\n#From Chapter 1\ndf %&gt;%\n  group_by(species, sex) %&gt;%\n  summarise(\n    across(\n        ends_with(\"mm\") | ends_with(\"g\"),\n      \\(x) mean(x, na.rm = TRUE)\n      )\n    ) %&gt;%\n  dplyr::collect() %&gt;%\n  knitr::kable()\n\n`summarise()` has grouped output by \"species\". You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\n\n\n\n\n\nspecies\nsex\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\n\n\n\n\nAdelie\nNA\n37.84000\n18.32000\n185.6000\n3540.000\n\n\nAdelie\nfemale\n37.25753\n17.62192\n187.7945\n3368.836\n\n\nAdelie\nmale\n40.39041\n19.07260\n192.4110\n4043.493\n\n\nChinstrap\nfemale\n46.57353\n17.58824\n191.7353\n3527.206\n\n\nChinstrap\nmale\n51.09412\n19.25294\n199.9118\n3938.971\n\n\nGentoo\nNA\n45.62500\n14.55000\n215.7500\n4587.500\n\n\nGentoo\nfemale\n45.56379\n14.23793\n212.7069\n4679.741\n\n\nGentoo\nmale\n49.47377\n15.71803\n221.5410\n5484.836\n\n\n\n\n\n\n#Given EDA\ndf %&gt;%\n  ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +\n  geom_point() + \n  geom_smooth(method = \"lm\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`)."
  },
  {
    "objectID": "eda.html#penguin-bill-length-by-sex-and-species",
    "href": "eda.html#penguin-bill-length-by-sex-and-species",
    "title": "eda.qmd",
    "section": "Penguin Bill Length by Sex and Species",
    "text": "Penguin Bill Length by Sex and Species\n\n# Boxplot for comparison \ndf%&gt;%\n  #formula \n  ggplot(aes(x=species, y = bill_length_mm, fill = species))+ \n  #creation\n  geom_boxplot() + \n  theme_minimal() +\n  labs(title = \"Comparison of Bill Length by Species \", x = \"Species\", y = \"Bill Length (mm)\")\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n\n\n\n\n\n\n\n\n\n\n# Boxplot for comparison \ndf%&gt;%\n  #formula \n  ggplot(aes(x=sex, y = bill_length_mm, fill = species))+ \n  #creation\n  geom_boxplot() + \n  theme_minimal() +\n  labs(title = \"Comparison of Bill Length by Sex \", x = \"Sex\", y = \"Bill Length (mm)\")\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_boxplot()`)."
  },
  {
    "objectID": "eda.html#penguin-bill-length-by-interaction-of-sex-and-species",
    "href": "eda.html#penguin-bill-length-by-interaction-of-sex-and-species",
    "title": "eda.qmd",
    "section": "Penguin Bill Length by Interaction of Sex and Species",
    "text": "Penguin Bill Length by Interaction of Sex and Species\n\ndf %&gt;%\n  ggplot(aes(x = interaction(species, sex), y = bill_length_mm, fill = species)) + \n  geom_boxplot() + \n  theme_minimal() +\n  labs(\n    title = \"Comparison of Bill Length by Sex and Species\",\n    x = \"Species and Sex\",\n    y = \"Bill Length (mm)\",\n    fill = \"Species\"\n  )\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n\n\n\n\n\n\n\n\n\nRandom Forest for Classification by Species\n\nhead(penguins)\n\n# A tibble: 6 × 7\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 1 more variable: sex &lt;fct&gt;\n\n\n\n#Random forest for classification for species\ntree_spec &lt;- decision_tree() %&gt;%   \n  set_engine(\"rpart\")\nclass_tree_spec &lt;- decision_tree() %&gt;%      \n  set_engine(\"rpart\") %&gt;%      \n  set_mode(\"classification\")\n\nclass_tree_fit &lt;- class_tree_spec %&gt;%    \n  fit(species ~ ., data = penguins)\n\n\nclass_tree_fit %&gt;%\n  extract_fit_engine() %&gt;%\n  rpart.plot()\n\nWarning: Cannot retrieve the data used to build the model (so cannot determine roundint and is.binary for the variables).\nTo silence this warning:\n    Call rpart.plot with roundint=FALSE,\n    or rebuild the rpart model with model=TRUE.\n\n\n\n\n\n\n\n\naugment(class_tree_fit, new_data = penguins) %&gt;%\n  accuracy(truth = species, estimate =.pred_class)\n\n# A tibble: 1 × 3\n  .metric  .estimator .estimate\n  &lt;chr&gt;    &lt;chr&gt;          &lt;dbl&gt;\n1 accuracy multiclass     0.965\n\n\n\nset.seed(1234)\nPenguin_split &lt;- initial_split(penguins)\n\n\n#Train and test\nPenguin_train &lt;- training(Penguin_split)\nPenguin_test &lt;- testing(Penguin_split)\n\n\n#Fit on just the training data set\nclass_tree_fit &lt;- class_tree_spec %&gt;%    \n  fit(species ~ ., data = Penguin_train)   \n\nclass_tree_fit\n\nparsnip model object\n\nn= 258 \n\nnode), split, n, loss, yval, (yprob)\n      * denotes terminal node\n\n1) root 258 137 Adelie (0.468992248 0.205426357 0.325581395)  \n  2) flipper_length_mm&lt; 206.5 171  52 Adelie (0.695906433 0.298245614 0.005847953)  \n    4) bill_length_mm&lt; 43.15 119   3 Adelie (0.974789916 0.025210084 0.000000000) *\n    5) bill_length_mm&gt;=43.15 52   4 Chinstrap (0.057692308 0.923076923 0.019230769) *\n  3) flipper_length_mm&gt;=206.5 87   4 Gentoo (0.022988506 0.022988506 0.954022989) *\n\n\n\naugment(class_tree_fit, new_data = Penguin_train) %&gt;%\n  conf_mat(truth = species, estimate = .pred_class)\n\n           Truth\nPrediction  Adelie Chinstrap Gentoo\n  Adelie       116         3      0\n  Chinstrap      3        48      1\n  Gentoo         2         2     83\n\n\n\naugment(class_tree_fit, new_data = Penguin_train) %&gt;%\n  accuracy(truth = species, estimate = .pred_class)\n\n# A tibble: 1 × 3\n  .metric  .estimator .estimate\n  &lt;chr&gt;    &lt;chr&gt;          &lt;dbl&gt;\n1 accuracy multiclass     0.957\n\n\n\naugment(class_tree_fit, new_data = Penguin_test) %&gt;%\n  conf_mat(truth = species, estimate = .pred_class)\n\n           Truth\nPrediction  Adelie Chinstrap Gentoo\n  Adelie        28         1      0\n  Chinstrap      3        11      0\n  Gentoo         0         3     40\n\n\n\naugment(class_tree_fit, new_data = Penguin_test) %&gt;%\n  accuracy(truth = species, estimate = .pred_class)\n\n# A tibble: 1 × 3\n  .metric  .estimator .estimate\n  &lt;chr&gt;    &lt;chr&gt;          &lt;dbl&gt;\n1 accuracy multiclass     0.919\n\n\n\n#The testing data doesn't perform as well and we get a lower accuracy by around 4%. Let's try to use the cost_complexity option to see if there is a better tree size that will reduce the overfitting that is happening. \nclass_tree_wf &lt;- workflow() %&gt;%\n  add_model(class_tree_spec %&gt;% set_args(cost_complexity = tune())) %&gt;%\n  add_formula(species ~ .)\n\n\n#With this, we need to use k-fold cross validation and a grid of values \nset.seed(1234)\nPenguin_vfold &lt;- vfold_cv(Penguin_train, v = 10, strata = species)\nparam_grid &lt;- grid_regular(cost_complexity(range = c(-3, -1)), levels = 10)\n\n\n#Fitting the model\n#| cache: true \ntune_res &lt;- tune_grid(\n  class_tree_wf, \n  resamples = Penguin_vfold, \n  grid = param_grid, \n  metrics = metric_set(accuracy)\n)\n\n\n#Which cost-complexity results in the highest accuracy \n#| warning: false \nautoplot(tune_res)\n\n\n\n\n\n\n\nbest_complexity &lt;- select_best(tune_res)\n\nWarning in select_best(tune_res): No value of `metric` was given; \"accuracy\"\nwill be used.\n\n\n\n#Update the cost_complexity and on the full training set \n#| warning: false \nclass_tree_final &lt;- finalize_workflow(class_tree_wf, best_complexity)\nclass_tree_final_fit &lt;- fit(class_tree_final, data = Penguin_train)\nclass_tree_final_fit\n\n══ Workflow [trained] ══════════════════════════════════════════════════════════\nPreprocessor: Formula\nModel: decision_tree()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\nspecies ~ .\n\n── Model ───────────────────────────────────────────────────────────────────────\nn= 258 \n\nnode), split, n, loss, yval, (yprob)\n      * denotes terminal node\n\n1) root 258 137 Adelie (0.468992248 0.205426357 0.325581395)  \n  2) flipper_length_mm&lt; 206.5 171  52 Adelie (0.695906433 0.298245614 0.005847953)  \n    4) bill_length_mm&lt; 43.15 119   3 Adelie (0.974789916 0.025210084 0.000000000) *\n    5) bill_length_mm&gt;=43.15 52   4 Chinstrap (0.057692308 0.923076923 0.019230769) *\n  3) flipper_length_mm&gt;=206.5 87   4 Gentoo (0.022988506 0.022988506 0.954022989) *\n\n\n\n#Final pruned tree \nclass_tree_final_fit %&gt;%      \n  extract_fit_engine() %&gt;%      \n  rpart.plot()\n\nWarning: Cannot retrieve the data used to build the model (so cannot determine roundint and is.binary for the variables).\nTo silence this warning:\n    Call rpart.plot with roundint=FALSE,\n    or rebuild the rpart model with model=TRUE.\n\n\n\n\n\n\n\n\n\n\n#Best Accuracy \naugment(class_tree_fit, new_data = Penguin_train) %&gt;%\n  accuracy(truth = species, estimate = .pred_class)\n\n# A tibble: 1 × 3\n  .metric  .estimator .estimate\n  &lt;chr&gt;    &lt;chr&gt;          &lt;dbl&gt;\n1 accuracy multiclass     0.957\n\n\n\n#The output of this is the pruned tree\nclass_tree_final_fit %&gt;%      \n  extract_fit_engine() %&gt;%      \n  rpart.plot()\n\nWarning: Cannot retrieve the data used to build the model (so cannot determine roundint and is.binary for the variables).\nTo silence this warning:\n    Call rpart.plot with roundint=FALSE,\n    or rebuild the rpart model with model=TRUE.\n\n\n\n\n\n\n\n\n\n\nDBI::dbDisconnect(con, shutdown = TRUE)"
  }
]